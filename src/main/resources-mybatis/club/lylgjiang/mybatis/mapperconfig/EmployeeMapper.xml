<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="club.lylgjiang.mybatis.mapperconfig.EmployeeMapper">

    
    
    
    
    <!-- parameterType：参数类型，可以省略， 
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
    <insert id="addEmp" parameterType="employee" 
            databaseId="mysql" useGeneratedKeys="true" keyProperty="id">
        insert into tb1_employee(id, last_name, gender, email) 
        values(#{id}, #{lastName}, #{gender}, #{email})
    </insert>
    
    <!--而对于不支持自增型主键的数据库（例如Oracle），则可以使用  selectKey 子元素：
        selectKey 元素将会首先运行， id 会被设置， 然后插入语句会被调用-->
    <insert id="addEmp" parameterType="employee" 
            databaseId="oracle">
        <!-- 
		keyProperty:查出的主键值封装给javaBean的哪个属性
		order="BEFORE":当前sql在插入sql之前运行
			   AFTER：当前sql在插入sql之后运行
		resultType:查出的数据的返回值类型
		
		BEFORE运行顺序：
			先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
			在运行插入的sql；就可以取出id属性对应的值
		AFTER运行顺序：
			先运行插入的sql（从序列中取出新值作为id）；
			再运行selectKey查询id的sql；
		 -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) 
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>
    
    <!--public void delEmpById(Integer id);-->
    <delete id="delEmpById" databaseId="mysql" parameterType="Integer">
        delete from tb1_employee where id=#{id}
    </delete>
    
    <!--public void updateEmp(Employee employee);-->
    <update id="updateEmp" databaseId="mysql">
        update tb1_employee set last_name=#{lastName}, gender=#{gender}, email=#{email}
        where id=#{id}
    </update>
    
    <!--public Employee selectEmpById(Integer id);-->
    <select id="selectEmpById" databaseId="mysql" resultType="employee">
        select * from tb1_employee where id=#{id}
    </select>
    
</mapper>